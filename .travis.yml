language: cpp

compiler:
  - clang
  - gcc

cache: ccache

os:
  - linux
  - osx

services:
  - redis-server

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gcc-4.8
      - g++-4.8
      - clang

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install llvm; fi

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - CMAKE_PLATFORM="Linux"
  - CMAKE_VERSION_MAJOR="3"
  - CMAKE_VERSION_MINOR="15"
  - CMAKE_VERSION_PATCH="3"
  - CMAKE_VERSION="${CMAKE_VERSION_MAJOR}.${CMAKE_VERSION_MINOR}.${CMAKE_VERSION_PATCH}"
  - MD5HASH="aee19b081eb4f19d4f85d6aa5c069e01"
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then CMAKE_PLATFORM="Darwin"; fi
  - CMAKE_FILE="cmake-${CMAKE_VERSION}-${CMAKE_PLATFORM}-x86_64"
  - CMAKE_DIR="v${CMAKE_VERSION_MAJOR}.${CMAKE_VERSION_MINOR}"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - travis_retry wget https://cmake.org/files/${CMAKE_DIR}/${CMAKE_FILE}.tar.gz
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -xvf ${CMAKE_FILE}.tar.gz > /dev/null
  - mv ${CMAKE_FILE} cmake-install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - export PATH="${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH"
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install ccache; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export PATH="/usr/local/opt/ccache/libexec:$PATH"; fi
  - if [[ "$TRAVIS_OS_NAME" != "osx" && "$CXX" = "g++" ]]; then export CXX="g++-4.8" CC="gcc-4.8"; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install redis; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then (redis-server&); fi

before_script:
  # create a build folder for the out-of-source build
  - mkdir build
  # switch to build directory
  - cd build
  # run cmake; here we assume that the project's
  # top-level CMakeLists.txt is located at '..'
  - which cmake
  - cmake --version
  - cmake .. -DBUILD_TESTS=true -DBUILD_EXAMPLES=true

script:
  # once CMake has done its job we just build using make as usual
  - make
  # if the project uses ctest we can run the tests like this
  - GTEST_COLOR=1 ctest -VV
